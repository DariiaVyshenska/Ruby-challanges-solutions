1.
CREATE DATABASE billing;
\c billing

CREATE TABLE customers(
  id serial PRIMARY KEY,
  name text NOT NULL,
  payment_token char(8) NOT NULL UNIQUE CHECK(payment_token SIMILAR TO '[A-Z]{8}')
);

CREATE TABLE services(
  id serial PRIMARY KEY,
  description text NOT NULL,
  price numeric(10, 2) NOT NULL CHECK(price >= 0.00)
);

INSERT INTO customers (name, payment_token)
VALUES ('Pat Johnson', 'XHGOAHEQ'),
      ('Nancy Monreal', 'JKWQPJKL'),
      ('Lynn Blake', 'KLZXWEEE'),
      ('Chen Ke-Hua', 'KWETYCVX'),
      ('Scott Lakso', 'UUEAPQPS'),
      ('Jim Pornot', 'XKJEYAZA');

INSERT INTO services (description, price)
VALUES ('Unix Hosting', 5.95),
      ('DNS', 4.95),
      ('Whois Registration', 1.95),
      ('High Bandwidth', 15.00),
      ('Business Support', 250.00),
      ('Dedicated Hosting', 50.00),
      ('Bulk Email', 250.00),
      ('One-to-one Training', 999.00);

CREATE TABLE customers_services(
  id serial PRIMARY KEY,
  customer_id INT NOT NULL REFERENCES customers(id) ON DELETE CASCADE,
  services_id INT NOT NULL REFERENCES services(id),
  UNIQUE(customer_id, services_id)
);

INSERT INTO customers_services (customer_id, services_id)
VALUES(1, 1),
      (1, 2),
      (1, 3),
      (3, 1),
      (3, 2),
      (3, 3),
      (3, 4),
      (3, 5),
      (4, 1),
      (4, 4),
      (5, 1),
      (5, 2),
      (5, 6),
      (6, 1),
      (6, 6),
      (6, 7);

2.
SELECT DISTINCT customers.*
  FROM customers
    JOIN customers_services ON customers.id = customers_services.customer_id
    JOIN services ON services.id = customers_services.services_id;

SELECT customers.* FROM customers
  WHERE customers.id IN (SELECT customer_id FROM customers_services);

3.
SELECT customers.*
  FROM customers
    LEFT JOIN customers_services ON customers.id = customers_services.customer_id
WHERE customers_services.services_id IS NULL;

# further exploration
SELECT customers.*, services.*
  FROM customers
    FULL JOIN customers_services ON customers.id = customers_services.customer_id
    FULL JOIN services ON services.id = customers_services.services_id
WHERE services.id IS NULL OR customers.id IS NULL;

4.
SELECT services.description
  FROM customers_services
    RIGHT JOIN services ON services.id = customers_services.services_id
WHERE customer_id IS NULL;

5.
SELECT customers.name, string_agg(services.description, ', ') AS services
  FROM customers
    LEFT JOIN customers_services ON customers.id = customers_services.customer_id
    LEFT JOIN services ON services.id = customers_services.services_id
GROUP BY customers.id;

# further exploration:
SELECT
  CASE WHEN name = lag(name) OVER (ORDER BY name) THEN ''
       ELSE name
       END AS name,
  description
FROM customers
  LEFT JOIN customers_services ON customers.id = customers_services.customer_id
  LEFT JOIN services ON services.id = customers_services.services_id;

6.
SELECT description, count(customer_id)
  FROM services
    LEFT JOIN customers_services ON services.id = customers_services.services_id
GROUP BY description HAVING count(customer_id) >= 3
ORDER BY description;

7.
SELECT sum(price) AS gross
  FROM services
    JOIN customers_services ON services.id = customers_services.services_id;

8.
INSERT INTO customers (name, payment_token)
VALUES ('John Doe', 'EYODHLCN');

INSERT INTO customers_services (customer_id, services_id)
VALUES (7, 1),
       (7, 2),
       (7, 3);

9.
SELECT sum(price)
  FROM customers
    JOIN customers_services ON customers.id = customers_services.customer_id
    JOIN services ON services.id = customers_services.services_id
WHERE price > 100;

# second task, version #1
SELECT (SELECT count(id) FROM customers) * (SELECT sum(price) FROM services WHERE price > 100) AS sum;
# second task, version #2
SELECT sum(price) FROM customers CROSS JOIN services WHERE price > 100;

10.
DELETE FROM customers_services WHERE services_id = 7;
DELETE FROM services WHERE description = 'Bulk Email';

DELETE FROM customers WHERE name = 'Chen Ke-Hua';
